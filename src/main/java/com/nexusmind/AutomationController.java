package com.nexusmind;

public class AutomationController {

    public static void main(String[] args) {
        System.out.println("Starting NexusMind Automation (Self-Loop Mode Enabled)...");

        CheckpointManager checkpointManager = new CheckpointManager();
        RepoManager repoManager = new RepoManager("https://github.com/glacious83/NexusMind", "C:\\Users\\mmamouze\\IdeaProjects\\NexusMind");
        ImprovementAgent agent = new ImprovementAgent(checkpointManager, repoManager);

        RepoAnalyzer analyzer = new RepoAnalyzer("C:\\Users\\mmamouze\\IdeaProjects\\NexusMind");
        AIPlanner planner = new AIPlanner();
        GitHubIssueManager issueManager = new GitHubIssueManager();

        while (true) {
            System.out.println("\n==== NexusMind New Cycle ====");

            try {
                // Step 1: Improve code batch
                repoManager.updateRepo();
                agent.improveNextFiles(5); // Process batch of 5 files

                // Step 2: Plan improvements
                String projectSummary = analyzer.generateProjectSummary();
                String improvementSuggestions = planner.generateImprovementSuggestions(projectSummary);

                // Step 3: Create GitHub Issues
                String[] suggestions = improvementSuggestions.split("\n");
                for (String suggestion : suggestions) {
                    if (!suggestion.trim().isEmpty()) {
                        String priority = determinePriority(suggestion);
                        String formattedBody = String.format(
                                "### Overview\n" +
                                        "This issue was auto-generated by NexusMind AI.\n\n" +
                                        "### Problem Description\n" +
                                        "%s\n\n" +
                                        "### Suggested Solution\n" +
                                        "_(NexusMind recommends improving this area based on project structure analysis.)_\n\n" +
                                        "### Priority\n" +
                                        "%s\n\n" +
                                        "### Estimated Complexity\n" +
                                        "Medium\n\n" +
                                        "### Additional Notes\n" +
                                        "NexusMind can attempt an automated Pull Request once approved.",
                                suggestion.trim(),
                                priority
                        );
                        issueManager.createIssue(suggestion.trim(), formattedBody);
                    }
                }

                System.out.println("\nCycle completed. Sleeping for 1 hour...");
                Thread.sleep(60 * 60 * 1000); // Sleep for 1 hour

            } catch (Exception e) {
                System.err.println("Error during cycle: " + e.getMessage());
                Notifier.sendError("Error during cycle: " + e.getMessage());
                try {
                    Thread.sleep(10 * 60 * 1000); // Sleep 10 minutes after error
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
            }
        }
    }

    private static String determinePriority(String suggestion) {
        String lower = suggestion.toLowerCase();
        if (lower.contains("security") || lower.contains("critical") || lower.contains("crash") || lower.contains("vulnerability")) {
            return "High";
        } else if (lower.contains("optimize") || lower.contains("performance") || lower.contains("refactor") || lower.contains("improve")) {
            return "Medium";
        } else {
            return "Low";
        }
    }
}
