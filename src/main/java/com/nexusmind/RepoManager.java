package com.nexusmind;

import java.util.Arrays;

public class AutomationController {

    private static final int FILE_BATCH_SIZE = 5;
    private static final long SUCCESS_SLEEP_DURATION_MS = 60 * 60 * 1000L; // 1 hour
    private static final long ERROR_SLEEP_DURATION_MS = 10 * 60 * 1000L;   // 10 minutes

    public static void main(String[] args) {
        System.out.println("Starting NexusMind Automation (Self-Loop Mode Enabled)...");

        CheckpointManager checkpointManager = new CheckpointManager();
        RepoManager repoManager = new RepoManager(
                "https://github.com/glacious83/NexusMind", 
                "C:\\Users\\mmamouze\\IdeaProjects\\NexusMind"
        );
        ImprovementAgent agent = new ImprovementAgent(checkpointManager, repoManager);
        RepoAnalyzer analyzer = new RepoAnalyzer(repoManager.getLocalPath());
        AIPlanner planner = new AIPlanner();
        GitHubIssueManager issueManager = new GitHubIssueManager();

        while (true) {
            System.out.println("\n==== NexusMind New Cycle ====");
            try {
                performCycle(agent, repoManager, analyzer, planner, issueManager);
                System.out.println("\nCycle completed. Sleeping for 1 hour...");
                sleep(SUCCESS_SLEEP_DURATION_MS);
            } catch (Exception e) {
                handleCycleError(e);
            }
        }
    }

    private static void performCycle(ImprovementAgent agent, RepoManager repoManager,
                                      RepoAnalyzer analyzer, AIPlanner planner, GitHubIssueManager issueManager) throws Exception {
        repoManager.updateRepo();
        agent.improveNextFiles(FILE_BATCH_SIZE);

        String projectSummary = analyzer.generateProjectSummary();
        String improvementSuggestions = planner.generateImprovementSuggestions(projectSummary);

        Arrays.stream(improvementSuggestions.split("\n"))
                .map(String::trim)
                .filter(suggestion -> !suggestion.isEmpty())
                .forEach(suggestion -> {
                    String priority = determinePriority(suggestion);
                    String formattedBody = formatIssueBody(suggestion, priority);
                    issueManager.createIssue(suggestion, formattedBody);
                });
    }

    private static String determinePriority(String suggestion) {
        String lowerSuggestion = suggestion.toLowerCase();
        if (lowerSuggestion.contains("security") || lowerSuggestion.contains("critical") ||
            lowerSuggestion.contains("crash") || lowerSuggestion.contains("vulnerability")) {
            return "High";
        }
        if (lowerSuggestion.contains("optimize") || lowerSuggestion.contains("performance") ||
            lowerSuggestion.contains("refactor") || lowerSuggestion.contains("improve")) {
            return "Medium";
        }
        return "Low";
    }

    private static String formatIssueBody(String suggestion, String priority) {
        return String.format("""
                ### Overview
                This issue was auto-generated by NexusMind AI.

                ### Problem Description
                %s

                ### Suggested Solution
                _(NexusMind recommends improving this area based on project structure analysis.)_

                ### Priority
                %s

                ### Estimated Complexity
                Medium

                ### Additional Notes
                NexusMind can attempt an automated Pull Request once approved.
                """, suggestion, priority);
    }

    private static void handleCycleError(Exception e) {
        System.err.println("Error during cycle: " + e.getMessage());
        Notifier.sendError("Error during cycle: " + e.getMessage());
        sleep(ERROR_SLEEP_DURATION_MS);
    }

    private static void sleep(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
            System.err.println("Sleep interrupted: " + ex.getMessage());
        }
    }
}
